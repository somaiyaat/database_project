-- Check the output in DBMS_OUTPUT
SET SERVEROUTPUT ON;

--Student Performance Analytics
DECLARE
    v_total_students NUMBER;
    v_avg_cgpa NUMBER;
    v_highest_cgpa NUMBER := 0;
    v_top_student VARCHAR2(50);
BEGIN
    -- Get total students
    SELECT COUNT(*) INTO v_total_students FROM students;
    
    -- Calculate average CGPA
    SELECT AVG(CGPA) INTO v_avg_cgpa FROM grades;
    
    -- Find top student using FOR loop
    FOR student_rec IN (
        SELECT s.FirstName || ' ' || s.LastName as student_name, g.CGPA
        FROM students s
        JOIN grades g ON s.student_ID = g.student_ID
        ORDER BY g.CGPA DESC
    ) LOOP
        IF student_rec.CGPA > v_highest_cgpa THEN
            v_highest_cgpa := student_rec.CGPA;
            v_top_student := student_rec.student_name;
        END IF;
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('Total Students: ' || v_total_students);
    DBMS_OUTPUT.PUT_LINE('Average CGPA: ' || ROUND(v_avg_cgpa, 2));
    DBMS_OUTPUT.PUT_LINE('Top Student: ' || v_top_student || ' (CGPA: ' || v_highest_cgpa || ')');
END;
/

--Financial Status Update with Validation
DECLARE
    CURSOR finance_cur IS
        SELECT f.Finance_ID, f.Student_ID, f.Total_Amount, f.Amount_Paid, f.Due_Amount
        FROM Finance f
        WHERE f.Payment_Status = 'Due'
        FOR UPDATE;
    
    v_finance_rec finance_cur%ROWTYPE;
    v_counter NUMBER := 0;
    v_updated_count NUMBER := 0;
BEGIN
    OPEN finance_cur;
    
    WHILE v_counter < 10 LOOP  -- Process first 10 records
        FETCH finance_cur INTO v_finance_rec;
        EXIT WHEN finance_cur%NOTFOUND;
        
        -- Calculate due amount and update status
        IF v_finance_rec.Due_Amount <= 0 THEN
            UPDATE Finance 
            SET Payment_Status = 'Paid',
                Due_Amount = 0
            WHERE CURRENT OF finance_cur;
            v_updated_count := v_updated_count + 1;
            
            DBMS_OUTPUT.PUT_LINE('Updated student ID: ' || v_finance_rec.Student_ID || 
                               ' - Status: Paid');
        END IF;
        
        v_counter := v_counter + 1;
    END LOOP;
    
    CLOSE finance_cur;
    DBMS_OUTPUT.PUT_LINE('Total records updated: ' || v_updated_count);
END;
/

--Comprehensive Student Report Generator
DECLARE
    CURSOR student_report_cur IS
        SELECT 
            s.student_ID,
            s.FirstName || ' ' || s.LastName as student_name,
            d.department_Name,
            c.Course_Name,
            g.grade,
            g.CGPA,
            f.Total_Amount,
            f.Payment_Status,
            COUNT(ib.Book_ID) as books_issued
        FROM students s
        JOIN departments d ON s.Department_ID = d.department_ID
        LEFT JOIN enrollments e ON s.student_ID = e.student_ID
        LEFT JOIN courses c ON e.course_ID = c.course_ID
        LEFT JOIN grades g ON s.student_ID = g.student_ID AND c.course_ID = g.course_ID
        LEFT JOIN finance f ON s.student_ID = f.Student_ID
        LEFT JOIN issued_books ib ON s.student_ID = ib.Student_ID
        GROUP BY 
            s.student_ID, s.FirstName, s.LastName, d.department_Name, 
            c.Course_Name, g.grade, g.CGPA, f.Total_Amount, f.Payment_Status;
    
    v_report CLOB;
BEGIN
    v_report := 'COMPREHENSIVE STUDENT REPORT' || CHR(10) || CHR(10);
    
    FOR rec IN student_report_cur LOOP
        v_report := v_report ||
            'Student: ' || rec.student_name || CHR(10) ||
            'Department: ' || rec.department_Name || CHR(10) ||
            'Course: ' || rec.Course_Name || CHR(10) ||
            'Grade: ' || rec.grade || ' (CGPA: ' || rec.CGPA || ')' || CHR(10) ||
            'Fees: $' || rec.Total_Amount || ' - ' || rec.Payment_Status || CHR(10) ||
            'Books Issued: ' || rec.books_issued || CHR(10) ||
            '----------------------------------------' || CHR(10);
    END LOOP;
    
    -- You can save this to a file or table instead of output
    DBMS_OUTPUT.PUT_LINE(SUBSTR(v_report, 1, 4000));
END;
/

--Automated Library Management System
CREATE OR REPLACE PROCEDURE manage_library_operations IS
    v_overdue_count NUMBER;
    v_reservation_count NUMBER;
    v_available_books NUMBER;
BEGIN
    -- Calculate overdue books with fines
    SELECT COUNT(*) INTO v_overdue_count
    FROM issued_books
    WHERE Return_Date IS NULL AND Due_Date < SYSDATE;
    
    -- Update fines for overdue books
    UPDATE issued_books
    SET Fine_Amount = (SYSDATE - Due_Date) * 10  -- $10 per day fine
    WHERE Return_Date IS NULL AND Due_Date < SYSDATE;
    
    -- Check pending reservations
    SELECT COUNT(*) INTO v_reservation_count
    FROM BookReservations
    WHERE Status = 'Pending';
    
    -- Update available copies
    FOR book_rec IN (SELECT Book_ID, Available_Copies FROM Books) LOOP
        UPDATE Books
        SET Available_Copies = book_rec.Available_Copies - 
            (SELECT COUNT(*) FROM issued_books 
             WHERE Book_ID = book_rec.Book_ID AND Return_Date IS NULL)
        WHERE Book_ID = book_rec.Book_ID;
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('Library Management Report:');
    DBMS_OUTPUT.PUT_LINE('Overdue Books: ' || v_overdue_count);
    DBMS_OUTPUT.PUT_LINE('Pending Reservations: ' || v_reservation_count);
    DBMS_OUTPUT.PUT_LINE('Fines updated for overdue books');
    
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error in library management: ' || SQLERRM);
END manage_library_operations;
/

-- Execute the procedure
BEGIN
    manage_library_operations;
END;
/

--Student Performance Analyzer
CREATE OR REPLACE FUNCTION analyze_student_performance(
    p_student_id IN NUMBER
) RETURN VARCHAR2 IS
    v_total_courses NUMBER;
    v_avg_grade VARCHAR2(2);
    v_total_cgpa NUMBER;
    v_attendance_rate NUMBER;
    v_financial_status VARCHAR2(20);
    v_result VARCHAR2(1000);
BEGIN
    -- Get total courses enrolled
    SELECT COUNT(*) INTO v_total_courses
    FROM enrollments
    WHERE student_ID = p_student_id;
    
    -- Calculate average grade
    SELECT AVG(
        CASE grade 
            WHEN 'A' THEN 4.0
            WHEN 'B' THEN 3.0
            WHEN 'C' THEN 2.0
            WHEN 'D' THEN 1.0
            ELSE 0
        END
    ) INTO v_total_cgpa
    FROM grades
    WHERE student_ID = p_student_id;
    
    -- Calculate attendance rate
    SELECT ROUND(
        (COUNT(CASE WHEN status = 'Present' THEN 1 END) * 100.0 / COUNT(*)), 
        2
    ) INTO v_attendance_rate
    FROM attendance
    WHERE student_ID = p_student_id;
    
    -- Get financial status
    SELECT Payment_Status INTO v_financial_status
    FROM finance
    WHERE Student_ID = p_student_id;
    
    -- Generate performance analysis
    v_result := 'STUDENT PERFORMANCE ANALYSIS' || CHR(10) ||
                'Courses Enrolled: ' || v_total_courses || CHR(10) ||
                'Average CGPA: ' || ROUND(v_total_cgpa, 2) || CHR(10) ||
                'Attendance Rate: ' || v_attendance_rate || '%' || CHR(10) ||
                'Financial Status: ' || v_financial_status || CHR(10);
    
    -- Add performance rating
    IF v_total_cgpa >= 3.5 AND v_attendance_rate >= 90 THEN
        v_result := v_result || 'PERFORMANCE RATING: EXCELLENT';
    ELSIF v_total_cgpa >= 3.0 AND v_attendance_rate >= 80 THEN
        v_result := v_result || 'PERFORMANCE RATING: GOOD';
    ELSE
        v_result := v_result || 'PERFORMANCE RATING: NEEDS IMPROVEMENT';
    END IF;
    
    RETURN v_result;
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Student not found';
    WHEN OTHERS THEN
        RETURN 'Error analyzing performance: ' || SQLERRM;
END analyze_student_performance;
/

-- Test the function
BEGIN
    DBMS_OUTPUT.PUT_LINE(analyze_student_performance(201));
END;
/

--Mass Data Processing
DECLARE
    TYPE student_tab IS TABLE OF students%ROWTYPE;
    v_students student_tab;
    
    TYPE finance_tab IS TABLE OF finance%ROWTYPE;
    v_finances finance_tab;
    
    v_processed_count NUMBER := 0;
BEGIN
    -- Bulk collect all students with due payments
    SELECT * BULK COLLECT INTO v_students
    FROM students s
    WHERE EXISTS (
        SELECT 1 FROM finance f 
        WHERE f.Student_ID = s.student_ID 
        AND f.Payment_Status = 'Due'
    );
    
    -- Bulk collect corresponding finance records
    SELECT * BULK COLLECT INTO v_finances
    FROM finance
    WHERE Payment_Status = 'Due';
    
    -- Process in bulk
    FOR i IN 1..v_students.COUNT LOOP
        FOR j IN 1..v_finances.COUNT LOOP
            IF v_students(i).student_ID = v_finances(j).Student_ID THEN
                -- Send reminder (simulated here)
                DBMS_OUTPUT.PUT_LINE('Reminder sent to: ' || 
                    v_students(i).FirstName || ' ' || v_students(i).LastName ||
                    ' - Due Amount: $' || v_finances(j).Due_Amount);
                
                v_processed_count := v_processed_count + 1;
            END IF;
        END LOOP;
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('Total reminders sent: ' || v_processed_count);
    
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error in bulk processing: ' || SQLERRM);
END;
/
-- LOOP: Update faculty status based on hire date
DECLARE
    v_faculty_id Faculty.faculty_ID%TYPE;
    v_hire_date Faculty.Hire_Date%TYPE;
    v_counter NUMBER := 0;
BEGIN
    FOR fac_rec IN (SELECT faculty_ID, Hire_Date FROM Faculty) LOOP
        IF MONTHS_BETWEEN(SYSDATE, fac_rec.Hire_Date) > 60 THEN
            UPDATE Faculty 
            SET Status = 'Senior' 
            WHERE faculty_ID = fac_rec.faculty_ID;
            v_counter := v_counter + 1;
        END IF;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE(v_counter || ' faculty members marked as Senior');
END;
/
--Transport Management
CREATE OR REPLACE PROCEDURE manage_transport_operations IS
    CURSOR transport_cursor IS
        SELECT t.bus_id, t.driver_name, t.capacity, t.status,
               r.route_name, r.start_point, r.end_point,
               COUNT(tr.student_id) as registered_students
        FROM transport t
        JOIN routes r ON t.route_id = r.route_id
        LEFT JOIN transport_registration tr ON t.bus_id = tr.bus_id
        GROUP BY t.bus_id, t.driver_name, t.capacity, t.status,
                 r.route_name, r.start_point, r.end_point;
    
    v_total_capacity NUMBER := 0;
    v_utilization_percent NUMBER;
BEGIN
    DBMS_OUTPUT.PUT_LINE('=== TRANSPORT MANAGEMENT REPORT ===');
    DBMS_OUTPUT.PUT_LINE(RPAD('Bus', 8) || RPAD('Driver', 15) || 
                        RPAD('Route', 12) || RPAD('Capacity', 10) || 
                        RPAD('Registered', 12) || RPAD('Utilization', 15) || 
                        RPAD('Status', 12));
    DBMS_OUTPUT.PUT_LINE('='||RPAD('=', 80, '='));
    
    -- FOR Loop with cursor
    FOR rec IN transport_cursor LOOP
        v_utilization_percent := (rec.registered_students / rec.capacity) * 100;
        v_total_capacity := v_total_capacity + rec.capacity;
        
        DBMS_OUTPUT.PUT_LINE(
            RPAD(rec.bus_id, 8) ||
            RPAD(rec.driver_name, 15) ||
            RPAD(rec.route_name, 12) ||
            RPAD(rec.capacity, 10) ||
            RPAD(rec.registered_students, 12) ||
            RPAD(ROUND(v_utilization_percent, 1) || '%', 15) ||
            RPAD(rec.status, 12)
        );
        
        -- Check for overcapacity and update status if needed
        IF rec.registered_students > rec.capacity THEN
            UPDATE transport 
            SET status = 'Overloaded'
            WHERE bus_id = rec.bus_id;
            DBMS_OUTPUT.PUT_LINE('   WARNING: Bus ' || rec.bus_id || ' is OVERLOADED!');
        ELSIF v_utilization_percent < 30 THEN
            UPDATE transport 
            SET status = 'Underutilized'
            WHERE bus_id = rec.bus_id;
        END IF;
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('Total Transport Capacity: ' || v_total_capacity || ' students');
END manage_transport_operations;
/

EXECUTE manage_transport_operations();